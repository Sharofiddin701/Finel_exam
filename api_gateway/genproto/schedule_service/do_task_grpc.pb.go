// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: do_task.proto

package schedule_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DoTaskService_Create_FullMethodName  = "/schedule_service.DoTaskService/Create"
	DoTaskService_GetByID_FullMethodName = "/schedule_service.DoTaskService/GetByID"
	DoTaskService_GetList_FullMethodName = "/schedule_service.DoTaskService/GetList"
	DoTaskService_Update_FullMethodName  = "/schedule_service.DoTaskService/Update"
	DoTaskService_Delete_FullMethodName  = "/schedule_service.DoTaskService/Delete"
)

// DoTaskServiceClient is the client API for DoTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoTaskServiceClient interface {
	Create(ctx context.Context, in *CreateDoTask, opts ...grpc.CallOption) (*DoTask, error)
	GetByID(ctx context.Context, in *DoTaskPrimaryKey, opts ...grpc.CallOption) (*DoTask, error)
	GetList(ctx context.Context, in *GetListDoTaskRequest, opts ...grpc.CallOption) (*GetListDoTaskResponse, error)
	Update(ctx context.Context, in *UpdateDoTask, opts ...grpc.CallOption) (*DoTask, error)
	Delete(ctx context.Context, in *DoTaskPrimaryKey, opts ...grpc.CallOption) (*DoTaskEmpty, error)
}

type doTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDoTaskServiceClient(cc grpc.ClientConnInterface) DoTaskServiceClient {
	return &doTaskServiceClient{cc}
}

func (c *doTaskServiceClient) Create(ctx context.Context, in *CreateDoTask, opts ...grpc.CallOption) (*DoTask, error) {
	out := new(DoTask)
	err := c.cc.Invoke(ctx, DoTaskService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doTaskServiceClient) GetByID(ctx context.Context, in *DoTaskPrimaryKey, opts ...grpc.CallOption) (*DoTask, error) {
	out := new(DoTask)
	err := c.cc.Invoke(ctx, DoTaskService_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doTaskServiceClient) GetList(ctx context.Context, in *GetListDoTaskRequest, opts ...grpc.CallOption) (*GetListDoTaskResponse, error) {
	out := new(GetListDoTaskResponse)
	err := c.cc.Invoke(ctx, DoTaskService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doTaskServiceClient) Update(ctx context.Context, in *UpdateDoTask, opts ...grpc.CallOption) (*DoTask, error) {
	out := new(DoTask)
	err := c.cc.Invoke(ctx, DoTaskService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doTaskServiceClient) Delete(ctx context.Context, in *DoTaskPrimaryKey, opts ...grpc.CallOption) (*DoTaskEmpty, error) {
	out := new(DoTaskEmpty)
	err := c.cc.Invoke(ctx, DoTaskService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoTaskServiceServer is the server API for DoTaskService service.
// All implementations must embed UnimplementedDoTaskServiceServer
// for forward compatibility
type DoTaskServiceServer interface {
	Create(context.Context, *CreateDoTask) (*DoTask, error)
	GetByID(context.Context, *DoTaskPrimaryKey) (*DoTask, error)
	GetList(context.Context, *GetListDoTaskRequest) (*GetListDoTaskResponse, error)
	Update(context.Context, *UpdateDoTask) (*DoTask, error)
	Delete(context.Context, *DoTaskPrimaryKey) (*DoTaskEmpty, error)
	mustEmbedUnimplementedDoTaskServiceServer()
}

// UnimplementedDoTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDoTaskServiceServer struct {
}

func (UnimplementedDoTaskServiceServer) Create(context.Context, *CreateDoTask) (*DoTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDoTaskServiceServer) GetByID(context.Context, *DoTaskPrimaryKey) (*DoTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedDoTaskServiceServer) GetList(context.Context, *GetListDoTaskRequest) (*GetListDoTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedDoTaskServiceServer) Update(context.Context, *UpdateDoTask) (*DoTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDoTaskServiceServer) Delete(context.Context, *DoTaskPrimaryKey) (*DoTaskEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDoTaskServiceServer) mustEmbedUnimplementedDoTaskServiceServer() {}

// UnsafeDoTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoTaskServiceServer will
// result in compilation errors.
type UnsafeDoTaskServiceServer interface {
	mustEmbedUnimplementedDoTaskServiceServer()
}

func RegisterDoTaskServiceServer(s grpc.ServiceRegistrar, srv DoTaskServiceServer) {
	s.RegisterService(&DoTaskService_ServiceDesc, srv)
}

func _DoTaskService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDoTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoTaskServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoTaskService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoTaskServiceServer).Create(ctx, req.(*CreateDoTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoTaskService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoTaskPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoTaskServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoTaskService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoTaskServiceServer).GetByID(ctx, req.(*DoTaskPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoTaskService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListDoTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoTaskServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoTaskService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoTaskServiceServer).GetList(ctx, req.(*GetListDoTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoTaskService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDoTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoTaskServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoTaskService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoTaskServiceServer).Update(ctx, req.(*UpdateDoTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoTaskService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoTaskPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoTaskServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoTaskService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoTaskServiceServer).Delete(ctx, req.(*DoTaskPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// DoTaskService_ServiceDesc is the grpc.ServiceDesc for DoTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schedule_service.DoTaskService",
	HandlerType: (*DoTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DoTaskService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _DoTaskService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _DoTaskService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DoTaskService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DoTaskService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "do_task.proto",
}
