// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: assign_student.proto

package schedule_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AssignStudentService_Create_FullMethodName  = "/schedule_service.AssignStudentService/Create"
	AssignStudentService_GetByID_FullMethodName = "/schedule_service.AssignStudentService/GetByID"
	AssignStudentService_GetList_FullMethodName = "/schedule_service.AssignStudentService/GetList"
	AssignStudentService_Update_FullMethodName  = "/schedule_service.AssignStudentService/Update"
	AssignStudentService_Delete_FullMethodName  = "/schedule_service.AssignStudentService/Delete"
)

// AssignStudentServiceClient is the client API for AssignStudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssignStudentServiceClient interface {
	Create(ctx context.Context, in *CreateAssignStudent, opts ...grpc.CallOption) (*AssignStudent, error)
	GetByID(ctx context.Context, in *AssignStudentPrimaryKey, opts ...grpc.CallOption) (*AssignStudent, error)
	GetList(ctx context.Context, in *GetListAssignStudentRequest, opts ...grpc.CallOption) (*GetListAssignStudentResponse, error)
	Update(ctx context.Context, in *UpdateAssignStudent, opts ...grpc.CallOption) (*AssignStudent, error)
	Delete(ctx context.Context, in *AssignStudentPrimaryKey, opts ...grpc.CallOption) (*AssignStudentEmpty, error)
}

type assignStudentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignStudentServiceClient(cc grpc.ClientConnInterface) AssignStudentServiceClient {
	return &assignStudentServiceClient{cc}
}

func (c *assignStudentServiceClient) Create(ctx context.Context, in *CreateAssignStudent, opts ...grpc.CallOption) (*AssignStudent, error) {
	out := new(AssignStudent)
	err := c.cc.Invoke(ctx, AssignStudentService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignStudentServiceClient) GetByID(ctx context.Context, in *AssignStudentPrimaryKey, opts ...grpc.CallOption) (*AssignStudent, error) {
	out := new(AssignStudent)
	err := c.cc.Invoke(ctx, AssignStudentService_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignStudentServiceClient) GetList(ctx context.Context, in *GetListAssignStudentRequest, opts ...grpc.CallOption) (*GetListAssignStudentResponse, error) {
	out := new(GetListAssignStudentResponse)
	err := c.cc.Invoke(ctx, AssignStudentService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignStudentServiceClient) Update(ctx context.Context, in *UpdateAssignStudent, opts ...grpc.CallOption) (*AssignStudent, error) {
	out := new(AssignStudent)
	err := c.cc.Invoke(ctx, AssignStudentService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignStudentServiceClient) Delete(ctx context.Context, in *AssignStudentPrimaryKey, opts ...grpc.CallOption) (*AssignStudentEmpty, error) {
	out := new(AssignStudentEmpty)
	err := c.cc.Invoke(ctx, AssignStudentService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignStudentServiceServer is the server API for AssignStudentService service.
// All implementations must embed UnimplementedAssignStudentServiceServer
// for forward compatibility
type AssignStudentServiceServer interface {
	Create(context.Context, *CreateAssignStudent) (*AssignStudent, error)
	GetByID(context.Context, *AssignStudentPrimaryKey) (*AssignStudent, error)
	GetList(context.Context, *GetListAssignStudentRequest) (*GetListAssignStudentResponse, error)
	Update(context.Context, *UpdateAssignStudent) (*AssignStudent, error)
	Delete(context.Context, *AssignStudentPrimaryKey) (*AssignStudentEmpty, error)
	mustEmbedUnimplementedAssignStudentServiceServer()
}

// UnimplementedAssignStudentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAssignStudentServiceServer struct {
}

func (UnimplementedAssignStudentServiceServer) Create(context.Context, *CreateAssignStudent) (*AssignStudent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAssignStudentServiceServer) GetByID(context.Context, *AssignStudentPrimaryKey) (*AssignStudent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedAssignStudentServiceServer) GetList(context.Context, *GetListAssignStudentRequest) (*GetListAssignStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedAssignStudentServiceServer) Update(context.Context, *UpdateAssignStudent) (*AssignStudent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAssignStudentServiceServer) Delete(context.Context, *AssignStudentPrimaryKey) (*AssignStudentEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAssignStudentServiceServer) mustEmbedUnimplementedAssignStudentServiceServer() {}

// UnsafeAssignStudentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignStudentServiceServer will
// result in compilation errors.
type UnsafeAssignStudentServiceServer interface {
	mustEmbedUnimplementedAssignStudentServiceServer()
}

func RegisterAssignStudentServiceServer(s grpc.ServiceRegistrar, srv AssignStudentServiceServer) {
	s.RegisterService(&AssignStudentService_ServiceDesc, srv)
}

func _AssignStudentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssignStudent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignStudentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssignStudentService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignStudentServiceServer).Create(ctx, req.(*CreateAssignStudent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignStudentService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignStudentPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignStudentServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssignStudentService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignStudentServiceServer).GetByID(ctx, req.(*AssignStudentPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignStudentService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListAssignStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignStudentServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssignStudentService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignStudentServiceServer).GetList(ctx, req.(*GetListAssignStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignStudentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssignStudent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignStudentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssignStudentService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignStudentServiceServer).Update(ctx, req.(*UpdateAssignStudent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignStudentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignStudentPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignStudentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssignStudentService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignStudentServiceServer).Delete(ctx, req.(*AssignStudentPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// AssignStudentService_ServiceDesc is the grpc.ServiceDesc for AssignStudentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssignStudentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schedule_service.AssignStudentService",
	HandlerType: (*AssignStudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AssignStudentService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _AssignStudentService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _AssignStudentService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AssignStudentService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AssignStudentService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assign_student.proto",
}
